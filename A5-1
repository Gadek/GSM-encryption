from random import randint
import time, math
from collections import deque

def randomInput(clock_type):
    if clock_type == "session_key":
        randomClock = randint(0, (2 ** 64) - 1)
        randomClock = "{0:{fill}64b}".format(randomClock, fill='0')
    elif clock_type == "frame_counter":
        randomClock = randint(0, (2 ** 22) - 1)
        randomClock = "{0:{fill}22b}".format(randomClock, fill='0')
    else:
        print("Access Denied!")
    return randomClock


def tappedBit(shift_register):
    if shift_register == "lfsr1":
        result = [13, 16, 17, 18]
    elif shift_register == "lfsr2":
        result = [20, 21]
    elif shift_register == "lfsr3":
        result = [7, 20, 21, 22]
    else:
        print("Access Denied!")
    return result


def clocking(lfsr, tapped_bit, key):
    lfsr = deque(lfsr)
    for num in range(len(key)):
        if len(tapped_bit) == 4:
            resultXorLfsr = int(lfsr[tapped_bit[3]])^ int(lfsr[tapped_bit[2]]) ^ int(lfsr[tapped_bit[1]]) ^ int(lfsr[tapped_bit[0]])
        else:
            resultXorLfsr = int(lfsr[tapped_bit[1]]) ^ int(lfsr[tapped_bit[0]])
        resultFinal = int(key[num]) ^ resultXorLfsr
        lfsr.rotate(1)
        lfsr[0] = str(resultFinal)
    return lfsr


def create228bitskey(sessionKey, frameCounter):
    # Initialize LFSR
    print("LFSR initiating...")
    lfsr1 = "{0:{fill}19b}".format(0, fill='0')  # 19bit
    lfsr2 = "{0:{fill}22b}".format(0, fill='0')  # 22bit
    lfsr3 = "{0:{fill}23b}".format(0, fill='0')  # 23bit
    print("LFSR 1 : ", lfsr1)
    print("LFSR 2 : ", lfsr2)
    print("LFSR 3 : ", lfsr3)
    time.sleep(1)


    print("\nStep 1")
    # XOR-ing session key and lfsr tapped bits
    print("\nXOR-ing between session key and LFSR with tapped bit\n")
    time.sleep(1)
    lfsr1 = clocking(lfsr1, tappedBit("lfsr1"), sessionKey)
    print("XOR-ing result on lfsr 1 : " + ''.join(lfsr1))
    lfsr2 = clocking(lfsr2, tappedBit("lfsr2"), sessionKey)
    print("XOR-ing result on lfsr 2 : " + ''.join(lfsr2))
    lfsr3 = clocking(lfsr3, tappedBit("lfsr3"), sessionKey)
    print("XOR-ing result on lfsr 3 : " + ''.join(lfsr3))
    time.sleep(2)


    print("\nStep 2")
    # XOR-ing frame counter and lfsr tapped bits
    print("\nXOR-ing between frame counter and LFSR with tapped bit\n")
    time.sleep(1)
    lfsr1 = clocking(lfsr1, tappedBit("lfsr1"), frameCounter)
    print("XOR-ing result on lfsr 1 : " + ''.join(lfsr1))
    lfsr2 = clocking(lfsr2, tappedBit("lfsr2"), frameCounter)
    print("XOR-ing result on lfsr 2 : " + ''.join(lfsr2))
    lfsr3 = clocking(lfsr3, tappedBit("lfsr3"), frameCounter)
    print("XOR-ing result on lfsr 3 : " + ''.join(lfsr3))
    time.sleep(2)

    print("\nStep 3\n")
    # Pengacakan lfsr 100 kali irregular clock menggunakan majority bit
    bit_zero = [0]
    # Checking majority bit dan loop irregular clock
    print("Irregular clocking of LFSR with majority bit\n")
    for num in range(100):
        counterZero = 0
        counterOne = 0
        if lfsr1[8] == "0":
            counterZero = counterZero + 1
        else:
            counterOne = counterOne + 1

        if lfsr2[10] == "0":
            counterZero = counterZero + 1
        else:
            counterOne = counterOne + 1

        if lfsr2[10] == "0":
            counterZero = counterZero + 1
        else:
            counterOne = counterOne + 1
        if counterZero > counterOne:
            if lfsr1[8] == "0":
                lfsr1 = clocking(lfsr1, tappedBit("lfsr1"), bit_zero)
            if lfsr2[10] == "0":
                lfsr2 = clocking(lfsr2, tappedBit("lfsr2"), bit_zero)
            if lfsr3[10] == "0":
                lfsr3 = clocking(lfsr3, tappedBit("lfsr3"), bit_zero)
        else:
            if lfsr1[8] == "1":
                lfsr1 = clocking(lfsr1, tappedBit("lfsr1"), bit_zero)
            if lfsr2[10] == "1":
                lfsr2 = clocking(lfsr2, tappedBit("lfsr2"), bit_zero)
            if lfsr3[10] == "1":
                lfsr3 = clocking(lfsr3, tappedBit("lfsr3"), bit_zero)


    time.sleep(1)
    print("Irregular clocking (part1) result on lfsr 1 : " + ''.join(lfsr1))
    print("Irregular clocking (part1) result on lfsr 2 : " + ''.join(lfsr2))
    print("Irregular clocking (part1) result on lfsr 3 : " + ''.join(lfsr3))
    time.sleep(2)
    print("\nStep 4\n")

    # Checking majority bit dan loop irregular clock part 2 + creating key stream
    print("Irregular clocking of LFSR (part2) with majority bit and generating key stream\n")
    keyStream228 = ""

    for num in range(228):
        counterZero = 0
        counterOne = 0

        if lfsr1[8] == "0":
            counterZero = counterZero + 1
        else:
            counterOne = counterOne + 1

        if lfsr2[10] == "0":
            counterZero = counterZero + 1
        else:
            counterOne = counterOne + 1

        if lfsr2[10] == "0":
            counterZero = counterZero + 1
        else:
            counterOne = counterOne + 1

        temp = int(int(lfsr1[-1]) ^ int(lfsr2[-1]) ^ int(lfsr3[-1]))
        keyStream228 += str(temp)

        if counterZero > counterOne:
            if lfsr1[8] == "0":
                lfsr1 = clocking(lfsr1, tappedBit("lfsr1"), bit_zero)
            if lfsr2[10] == "0":
                lfsr2 = clocking(lfsr2, tappedBit("lfsr2"), bit_zero)
            if lfsr3[10] == "0":
                lfsr3 = clocking(lfsr3, tappedBit("lfsr3"), bit_zero)
        else:
            if lfsr1[8] == "1":
                lfsr1 = clocking(lfsr1, tappedBit("lfsr1"), bit_zero)
            if lfsr2[10] == "1":
                lfsr2 = clocking(lfsr2, tappedBit("lfsr2"), bit_zero)
            if lfsr3[10] == "1":
                lfsr3 = clocking(lfsr3, tappedBit("lfsr3"), bit_zero)

    time.sleep(1)
    print("Irregular clocking (part2) result on lfsr 1 : " + ''.join(lfsr1))
    print("Irregular clocking (part2) result on lfsr 2 : " + ''.join(lfsr2))
    print("Irregular clocking (part2) result on lfsr 3 : " + ''.join(lfsr3))
    time.sleep(2)
    print("\nKey Stream : " + keyStream228)
    time.sleep(1)
    return keyStream228


if __name__ == "__main__":
    print("A5/1 Algorithm\n")

    # Input Plain Text
    plainText = input("Please enter your plaintext : ")
    print("You entered : " + plainText)
    plainText = ''.join(format(ord(x), 'b') for x in plainText)

    # Tapped Bits
    print("\nTapped Bits:\n")
    print("LFSR 1 : " + str(tappedBit("lfsr1")))
    print("LFSR 2 : " + str(tappedBit("lfsr2")))
    print("LFSR 3 : " + str(tappedBit("lfsr3")))
    time.sleep(1)

    print("\nStep 1\n")
    # Generate random session key
    print("\nCreating Session Key...\n")
    sessionKey = randomInput("session_key")
    print("Session Key Created : " + str(sessionKey) + " \n")
    # sessionKey = deque(sessionKey)
    time.sleep(1)

    # Generate random frame counter
    print("Creating Frame Counter...\n")
    frameCounter = randomInput("frame_counter")
    print("Frame Counter Created : " + frameCounter + " \n")
    # frameCounter = deque(frameCounter)
    time.sleep(1)

    #Generate key stream that is longer than plaintext
    frames = math.ceil(len(plainText)/228)
    print("In order to cipher it, it's necessary to generate", frames, "frames of keys, 228 bits long each\n")
    keyStream = ""
    for i in range(frames):
        print("\nGenerating",i+1,"frame\n")
        frame = bin(int(frameCounter,2)+i)[2:]
        keyStream += create228bitskey(sessionKey, frame)+" "


    print("\nFinal Step")
    print("\nXOR-ing between Key Stream and Plain Text\n")
    print("Key stream:  ", keyStream)
    plainText_formatted=""
    for i,b in enumerate(plainText):
        plainText_formatted+=b
        if (i+1)%228 == 0:
            plainText_formatted += " "

    print("Plain Text:  ", plainText_formatted)
    cipherText = ""

    for num in range(len(plainText)):
        if keyStream[num]==" ":
            cipherText += " "
            continue
        temp = int(keyStream[num]) ^ int(plainText[num])
        cipherText += str(temp)

    print("Cipper Text: ", cipherText)
